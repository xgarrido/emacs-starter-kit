#+TITLE: Starter Kit Other Mode
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Other Mode
** Eval after load
This macro is stolen from lunaryorn setup (see [[https://github.com/lunaryorn/stante-pede/blob/master/init.el][.emacs]] config) eval parameter
after package or component has been loaded.
#+BEGIN_SRC emacs-lisp
  (unless (fboundp 'with-eval-after-load)
    (defmacro with-eval-after-load (file &rest body)
      "Execute BODY after FILE is loaded. Forward compatibility wrapper."
      `(eval-after-load ,file
         `(funcall (function ,(lambda () ,@body))))))

  (defmacro starter-kit-after (feature &rest forms)
    "After FEATURE is loaded, evaluate FORMS. FORMS is byte compiled.
       FEATURE may be a named feature or a file name, see `eval-after-load' for details."
    (declare (indent 1) (debug t))
    ;; Byte compile the body.  If the feature is not available, ignore warnings.
    ;; Taken from
    ;; http://lists.gnu.org/archive/html/bug-gnu-emacs/2012-11/msg01262.html
    `(,(if (or (not (boundp 'byte-compile-current-file))
               (not byte-compile-current-file)
               (if (symbolp feature)
                   (require feature nil :no-error)
                 (load feature :no-message :no-error)))
           'progn
         (message "starter-kit-after: cannot find %s" feature)
         'with-no-warnings)
      (with-eval-after-load ',feature ,@forms)))
#+END_SRC

** Coding Hook
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'run-starter-kit-coding-hook)
  (add-hook 'sh-mode-hook         'run-starter-kit-coding-hook)
  (add-hook 'latex-mode-hook      'run-starter-kit-coding-hook)
  (add-hook 'python-mode-hook     'run-starter-kit-coding-hook)
#+END_SRC
* Modes setting
** CUA mode
#+BEGIN_SRC emacs-lisp
  (cua-mode t)
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
  (setq undo-tree-enable-undo-in-region t)
#+END_SRC

Increase undo limit to keep most of the history
#+BEGIN_SRC emacs-lisp
  (setq undo-limit 800000
        undo-strong-limit 12000000
        undo-outer-limit 120000000)
#+END_SRC

Do not store ~undo-tree~ file
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-auto-save-history nil)
#+END_SRC

** recentf
#+BEGIN_SRC emacs-lisp
  (starter-kit-after recentf
    (setq recentf-max-saved-items 100))
  (recentf-mode t)
#+END_SRC

** Transparently open compressed files
#+BEGIN_SRC emacs-lisp
  (auto-compression-mode t)
#+END_SRC

** Highlight matching parentheses when the point is on them.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0
        show-paren-style 'mixed)

  (require 'highlight-parentheses)
  (defun turn-on-highlight-parentheses-mode ()
    (highlight-parentheses-mode t))
  (define-global-minor-mode global-highlight-parentheses-mode
    highlight-parentheses-mode
    turn-on-highlight-parentheses-mode)
  (setq hl-paren-colors
        '("orange1" "yellow1" "greenyellow" "green1"
          "springgreen1" "cyan1" "slateblue1" "magenta1" "purple"))
  (global-highlight-parentheses-mode)
#+END_SRC

** Highlight everything strange
#+BEGIN_SRC emacs-lisp
  (starter-kit-after whitespace
    (setq whitespace-style '(face trailing lines-tail tabs)
          whitespace-line-column 80))
#+END_SRC

** isearch
Better backspace handling
#+BEGIN_SRC emacs-lisp
  (defun sk-isearch-delete ()
    "Delete the failed portion of the search string, or the last char if successful."
    (interactive)
    (with-isearch-suspended
     (setq isearch-new-string
           (substring
            isearch-string 0 (or (isearch-fail-pos) (1- (length isearch-string))))
           isearch-new-message
           (mapconcat 'isearch-text-char-description isearch-new-string ""))))
  (define-key isearch-mode-map (kbd "<backspace>")
              #'sk-isearch-delete)
#+END_SRC

Enable flex support
#+BEGIN_SRC emacs-lisp
  (require 'flex-isearch)
  (global-flex-isearch-mode 1)
  (setq flex-isearch-auto 'on-failed)
#+END_SRC

** Show a column wise indicator
#+BEGIN_SRC emacs-lisp
  (starter-kit-after fill-column-indicator
    (setq fci-rule-width 3))
  (setq-default fill-column 100)
#+END_SRC

** Highlight current line                                        :nottangle:
#+BEGIN_SRC emacs-lisp :tangle no
  (global-hl-line-mode t)
#+END_SRC
** Auto revert buffer
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  ;; revert without asking
  (setq revert-without-query '(".*"))
#+END_SRC
** Smartparens settings
#+BEGIN_SRC emacs-lisp
  (starter-kit-after smartparens
    (setq sp-ignore-modes-list '(calc-mode dired-mode ibuffer-mode
                                           minibuffer-incative-mode sr-mode)))
#+END_SRC
** which-func-mode                                               :nottangle:
Set function name in the header part of emacs (from
[[http://emacsredux.com/blog/2014/04/05/which-function-mode/]]).
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'which-func)
  (add-to-list 'which-func-modes 'org-mode)
  (add-to-list 'which-func-modes 'c++-mode)
  (setq which-func-unknown "n/a")
  (setq-default header-line-format
                '((which-func-mode ("" which-func-format " "))))
  (setq mode-line-misc-info
        ;; We remove Which Function Mode from the mode line, because it's mostly
        ;; invisible here anyway.
        (assq-delete-all 'which-func-mode mode-line-misc-info))
#+END_SRC

** Winner mode                                                   :nottangle:
#+BEGIN_SRC emacs-lisp :tangle no
  (winner-mode 1)
#+END_SRC
** Idle highlight face
Use a less intrusive color for =idle-highlight-mode=
#+BEGIN_SRC emacs-lisp
  (defface idle-highlight
    '((t (:inherit match)))
    "Face used to highlight other occurrences of the word at point."
    :group 'idle-highlight)
  ;; (require 'delight)
  ;; (starter-kit-after idle-highlight (delight 'idle-highlight-mode ""))
#+END_SRC

** projectile-mode                                               :nottangle:
:PROPERTIES:
:HEADER-ARGS: :tangle no
:END:
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

*** Remove directory name when completing
Stolen from [[https://gist.github.com/rejeep/5933343]].
#+BEGIN_SRC emacs-lisp
  (defun rejeep-projectile-completion-fn (prompt choises)
    "Projectile completion function that only shows file name.
  If two files have same name, new completion appears to select between
  them. These include the path relative to the project root."
    (interactive)
    (let* ((stripped-choises
            (-uniq (--map (file-name-nondirectory it) choises)))
           (choise
            (ido-completing-read prompt stripped-choises))
           (matching-files
            (-filter
             (lambda (file)
               (equal (file-name-nondirectory file) choise))
             choises)))
      (if (> (length matching-files) 1)
          (ido-completing-read prompt matching-files)
        (car matching-files))))

  (setq projectile-completion-system 'rejeep-projectile-completion-fn)
#+END_SRC
*** Reduce modeline information
#+BEGIN_SRC emacs-lisp
  (setq projectile-mode-line
        '(:propertize
          (:eval (format " ❬⊶ %s❭"
                         (truncate-string-to-width (projectile-project-name) 10 nil nil "…")))
          ))
#+END_SRC

*** Set bookmark directory
#+BEGIN_SRC emacs-lisp
  (setq projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld"
                                                         temporary-file-directory))
#+END_SRC

*** Sort file by most recent
#+BEGIN_SRC emacs-lisp
  (setq projectile-sort-order 'recentf)
#+END_SRC

** Magit settings
#+BEGIN_SRC emacs-lisp
  (require 'magit)
#+END_SRC
*** Do not ask for confirmation
#+BEGIN_SRC emacs-lisp
  (setq magit-stage-all-confirm nil)
#+END_SRC
*** Do not show untracked material
#+BEGIN_SRC emacs-lisp
  (setq magit-omit-untracked-dir-contents t)
#+END_SRC

*** Do not verify where to push
#+BEGIN_SRC emacs-lisp
  (setq magit-push-always-verify nil)
#+END_SRC

*** Fullscreen magit-status
From [[http://whattheemacsd.com/setup-magit.el-01.html][Magnars blog]]
#+BEGIN_SRC emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (global-set-key (kbd "M-s") 'magit-status)

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
  (define-key magit-status-mode-map (kbd "p") 'magit-push-current)
  (require 'magit-svn)
  (define-key magit-svn-mode-map    (kbd "p") 'magit-svn-dcommit)
#+END_SRC

*** Colored diff                                                :nottangle:
#+BEGIN_SRC emacs-lisp :tangle no
  (setq magit-diff-refine-hunk 'all)
#+END_SRC

*** Automatically enable =magit-svn-mode=
Stolen from [[http://danlamanna.com/2013/03/11/svn-externals-with-git-svn-and-magit/]]
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'magit-mode-hook (lambda()
                               (require 'magit-svn)
                               (magit-svn-mode)))
#+END_SRC
*** Enable ivy-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'magit-mode-hook (lambda()
                               (require 'ivy)
                               (ivy-mode 1)))
#+END_SRC

** Git gutter settings                                           :nottangle:
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'git-gutter)
  (setq git-gutter-disabled-modes '(asm-mode image-mode org-mode))
  (global-git-gutter-mode t)
  ;; If you would like to use git-gutter.el and linum-mode
  (git-gutter:linum-setup)
  (global-set-key (kbd "C-x C-g") 'git-gutter:toggle)
  ;; Jump to next/previous hunk
  (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
  (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

  ;; Stage current hunk
  (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)

  ;; Revert current hunk
  (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
#+END_SRC

Set =git-gutter= signs
#+BEGIN_SRC emacs-lisp
  ;; (setq git-gutter:modified-sign "◽")
  ;; (setq git-gutter:added-sign    "◾")
  ;; (setq git-gutter:deleted-sign  "▴")
#+END_SRC

** direx & direx-k
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'popwin)
  (popwin-mode 1)
  (require 'direx)
  (push '(direx:direx-mode :position left :width 40 :dedicated t :stick t)
        popwin:special-display-config)
  (global-set-key (kbd "C-ù") 'direx-project:jump-to-project-root-other-window)
  (setq direx:leaf-icon "  "
        direx:open-icon "▾ "
        direx:closed-icon "▸ ")
  (defface direx-k-modified
    '((t (:inherit warning :weight bold)))
    "Face of added file in git repository"
    :group 'dired-k)

  (defface direx-k-untracked
    '((t (:inherit error)))
    "Face of untracked file in git repository"
    :group 'dired-k)
  (require 'direx-k)
  (define-key direx:direx-mode-map (kbd "G") 'direx-k)
#+END_SRC

** diff-hl settings                                              :nottangle:
Tweak face by removing the foreground colors
#+BEGIN_SRC emacs-lisp :tangle no
  (starter-kit-after diff-hl
    (set-face-foreground 'diff-hl-insert nil)
    (set-face-foreground 'diff-hl-change nil)
    (set-face-foreground 'diff-hl-delete nil)
    )
  ;;(global-diff-hl-mode)
#+END_SRC
** projectile-mode                                               :nottangle:
:PROPERTIES:
:HEADER-ARGS: :tangle no
:END:

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

*** Remove directory name when completing
Stolen from [[https://gist.github.com/rejeep/5933343]].
#+BEGIN_SRC emacs-lisp
  (defun rejeep-projectile-completion-fn (prompt choises)
    "Projectile completion function that only shows file name.
  If two files have same name, new completion appears to select between
  them. These include the path relative to the project root."
    (interactive)
    (let* ((stripped-choises
            (-uniq (--map (file-name-nondirectory it) choises)))
           (choise
            (ido-completing-read prompt stripped-choises))
           (matching-files
            (-filter
             (lambda (file)
               (equal (file-name-nondirectory file) choise))
             choises)))
      (if (> (length matching-files) 1)
          (ido-completing-read prompt matching-files)
        (car matching-files))))

  (setq projectile-completion-system 'rejeep-projectile-completion-fn)
#+END_SRC

*** Reduce modeline information
#+BEGIN_SRC emacs-lisp
  (setq projectile-mode-line
        '(:propertize
          (:eval (format " ❬⊶ %s❭"
                         (truncate-string-to-width (projectile-project-name) 10 nil nil "…")))
          ))
#+END_SRC

*** Set bookmark directory
#+BEGIN_SRC emacs-lisp
  (setq projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld"
                                                         temporary-file-directory))
#+END_SRC

*** Sort file by most recent
#+BEGIN_SRC emacs-lisp
  (setq projectile-sort-order 'recentf)
#+END_SRC

** golden-ratio
#+BEGIN_SRC emacs-lisp
  (require 'golden-ratio)
  (golden-ratio-mode 1)
  (setq golden-ratio-exclude-modes '("dired-mode"))
  (setq golden-ratio-exclude-buffer-names '(" *compilation*" " *scratch*" " Direx"))
#+END_SRC

** hydra
*** org-mode

#+BEGIN_SRC emacs-lisp :results none
  (defhydra hydra-org-template (:color red :hint nil)
    "
  _s_rc      s_h_ell
  qu_o_te    _e_macs-lisp
  e_q_uation _p_ython
  questio_n_ _j_upyter
  "
    ("s" (insert "#+BEGIN_SRC\n#+END_SRC"))
    ("e" (insert "#+BEGIN_SRC emacs-lisp\n#+END_SRC"))
    ("h" (insert "#+BEGIN_SRC shell\n#+END_SRC"))
    ("o" (insert "#+BEGIN_QUOTE\n#+END_QUOTE"))
    ("n" (insert "#+BEGIN_QUESTION\n#+END_QUESTION"))
    ("j" (insert "#+BEGIN_SRC jupyter-python\n#+END_SRC"))
    ("p" (insert "#+BEGIN_SRC python\n#+END_SRC"))
    ("q" (insert "#+BEGIN_SRC latex\n\\begin{align*}\n\\end{align*}\n#+END_SRC"))
    ("<" self-insert-command "ins")
    ("o" nil "quit"))

  (define-key org-mode-map "<"
              (lambda () (interactive)
                (if (looking-back "^")
                    (hydra-org-template/body)
                  (self-insert-command 1))))
#+END_SRC

*** Main manager
#+BEGIN_SRC emacs-lisp
  (key-chord-define-global
   ",,"
   (defhydra hydra-main (:color red :hint nil)
     "
     Split: _v_ert _h_orz
    Delete: _o_nly _w_indow
      File: _f_ile g_i_t-gutter
      Mail: _g_mail _l_al
      "
     ("<left>"  windmove-left)
     ("<down>"  windmove-down)
     ("<up>"    windmove-up)
     ("<right>" windmove-right)
     ("|" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right)))
     ("_" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down)))
     ("v" split-window-right)
     ("h" split-window-below)
     ("o" delete-other-windows :exit t)
     ("w" delete-window)
     ("f" ido-find-file)
     ("i" hydra-git-gutter/body :exit t)
     ("g" sk-mu4e-gmail :exit t)
     ("l" sk-mu4e-lal :exit t)
     ("q" nil "quit")))
#+END_SRC

*** git gutter + dumb-jump
Defining hydra
#+BEGIN_SRC emacs-lisp
  (setq dumb-jump-selector 'ivy)
  (key-chord-define-global
   "$$"
   (defhydra hydra-code (:body-pre (git-gutter-mode 1)
                                   :hint nil)
     "
    [_q_] quit  git-gutter
              [_↑_] prev hunk [_s_] stage hunk  [_p_] popup hunk
              [_↓_] next hunk [_r_] revert hunk
    "
     ("<down>" git-gutter:next-hunk)
     ("<up>" git-gutter:previous-hunk)
     ("h" (progn (goto-char (point-min))
                 (git-gutter:next-hunk 1)))
     ("l" (progn (goto-char (point-min))
                 (git-gutter:previous-hunk 1)))
     ("s" git-gutter:stage-hunk)
     ("r" git-gutter:revert-hunk)
     ("p" git-gutter:popup-hunk)
     ;; ("g" dumb-jump-go :color green)
     ;; ("b" dumb-jump-back :color green)
     ;; ("l" dumb-jump-quick-look)
     ("q" nil :color blue)
     )
   )
#+END_SRC

** key-chord
#+BEGIN_SRC emacs-lisp
  (require 'key-chord)
  (key-chord-define-global "qq" 'delete-window)
  (key-chord-define-global "ùù" 'delete-other-windows)
  (key-chord-mode +1)
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (setq ivy-display-style 'fancy)
  ;; (setq swiper-completion-method 'ivy)
  ;; (setq recenter-positions '(top middle bottom))
  ;;advise swiper to recenter on exit
  (defun sk-swiper-recenter (&rest args)
    "recenter display after swiper"
    (recenter)
    )
  (advice-add 'swiper :after #'sk-swiper-recenter)
  (require 'ivy)
  (ivy-mode 1)
  (define-key ivy-minibuffer-map (kbd "<up>") 'ivy-previous-line)
  (define-key ivy-minibuffer-map (kbd "<down>") 'ivy-next-line)
  (define-key ivy-minibuffer-map (kbd "C-w") 'ivy-yank-word)
#+END_SRC

** hideshowvis
#+BEGIN_SRC emacs-lisp
  (require 'hideshowvis)
  (define-fringe-bitmap 'hideshowvis-hideable-marker [0 0 254 124 56 16 0 0])
  (define-fringe-bitmap 'hs-marker [0 32 48 56 60 56 48 32])
#+END_SRC
** latex-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.tikz\\'" . latex-mode))
  (add-hook 'latex-mode-hook 'turn-on-orgtbl)
  ;;(add-hook 'latex-mode-hook 'turn-on-auto-fill)
#+END_SRC
** markdown-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

** multi-web-mode
#+BEGIN_SRC emacs-lisp
  (setq mweb-default-major-mode 'html-mode)
  (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                    (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                    (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
  (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
  (multi-web-global-mode 1)
#+END_SRC
** cmake-mode
#+BEGIN_SRC emacs-lisp
  (require 'cmake-mode)
  (setq auto-mode-alist
        (append '(("CMakeLists\\.txt\\'" . cmake-mode)
                  ("\\.cmake\\'" . cmake-mode))
                auto-mode-alist))
#+END_SRC

** css-mode
#+BEGIN_SRC emacs-lisp
  (setq css-indent-offset 2)

  (defvar hexcolour-keywords
    '(("#[abcdef[:digit:]]\\{6\\}"
       (0 (put-text-property
           (match-beginning 0)
           (match-end 0)
           'face (list :background
                       (match-string-no-properties 0)))))))
  (defun hexcolour-add-to-font-lock ()
    (font-lock-add-keywords nil hexcolour-keywords))

  (add-hook 'css-mode-hook 'hexcolour-add-to-font-lock)
#+END_SRC

** trac-wiki-mode
Define some usual =trac-wiki= projects.
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'trac-wiki)
  (trac-wiki-define-project "trac-LAL"
                            "https://trac.lal.in2p3.fr/NEMO2/" t)

  (trac-wiki-define-project "trac-LPC"
                            "https://nemo.lpc-caen.in2p3.fr/" t)

  (autoload 'trac-wiki "trac-wiki"
    "Trac wiki editing entry-point." t)
#+END_SRC
** yasnippet mode
[[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It is inspired by
TextMate's templating syntax (watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]] or see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and
tutorial]])
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  ;; (yas-global-mode 1)
  (yas-reload-all)
  (setq yas-snippet-dirs '(concat starter-kit-dir "/snippets"))
  (add-hook 'starter-kit-coding-hook '(lambda ()
                                        (yas-minor-mode)))
#+END_SRC

** auto-complete+ido-at-point mode
#+BEGIN_SRC emacs-lisp
  (require 'auto-complete-config)
  ;; (global-auto-complete-mode t)
  (ac-config-default)
  (setq ac-auto-start 3
        ac-ignore-case nil
        ac-use-fuzzy t
        ac-use-comphist t)
  (ac-set-trigger-key "TAB")
  (ac-set-trigger-key "<tab>")
  (define-key ac-completing-map (kbd "ESC") 'ac-stop)
  (add-hook 'auto-complete-mode-hook
            (lambda ()
              (setq ac-sources (remove 'ac-source-abbrev ac-sources))))
#+END_SRC

** company-mode + tabnine
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'after-init-hook 'global-company-mode)
  (require 'company-tabnine)
  (add-to-list 'company-backends #'company-tabnine)
  ;; Trigger completion immediately.
  (setq company-idle-delay 0)

  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (setq company-show-numbers t)
#+END_SRC
** expand-region mode
#+BEGIN_SRC emacs-lisp
  (require 'expand-region)
  (global-set-key (kbd "C-w") 'er/expand-region)
#+END_SRC
** multiple-cursors mode                                         :nottangle:
:PROPERTIES:
:HEADER-ARGS: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C->") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-next-like-this)
#+END_SRC

** Browse kill-ring
#+BEGIN_SRC emacs-lisp
  (require 'browse-kill-ring)
  (global-set-key "\M-y" 'browse-kill-ring)
#+END_SRC
** lorem ipsum
#+BEGIN_SRC emacs-lisp
  (require 'lorem-ipsum)
#+END_SRC

** script-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC
** firestarter-mode
#+BEGIN_SRC emacs-lisp
  (setq firestarter-lighter "↯")
#+END_SRC
** tramp
#+BEGIN_SRC emacs-lisp
  (setq remote-file-name-inhibit-cache nil)
  (setq vc-ignore-dir-regexp
        (format "%s\\|%s"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))
  (setq tramp-verbose 1)
  (setq tramp-ssh-controlmaster-options "")
#+END_SRC

** pyvenv workon directory
#+BEGIN_SRC emacs-lisp
  (setenv "WORKON_HOME" (concat (getenv "HOME") "/.local/share/virtualenvs"))
#+END_SRC

#+RESULTS:
: /home/garrido.local/share/virtualenvs
** forge
#+BEGIN_SRC emacs-lisp :tangle no
  (with-eval-after-load 'magit
    (require 'forge))
#+END_SRC
** blacken & isortify
#+BEGIN_SRC emacs-lisp
  (require 'isortify)
  (add-hook 'python-mode-hook 'blacken-mode)
  (add-hook 'python-mode-hook 'isortify-mode)
  (setq blacken-line-length 100)
  (setq isortify-line-length 100)
  (defun sk-disable-python-minor-modes ()
    (interactive)
    (blacken-mode -1)
    (isortify-mode -1)
    )
#+END_SRC

# #+RESULTS:
# : 100
** toml formatter
#+BEGIN_SRC emacs-lisp
  (defgroup tomlfmt nil
    "Reformat TOML code with \"taplo\"."
    :group 'toml)

  (defcustom tomlfmt-executable "taplo"
    "Name of the executable to run."
    :type 'string)


  (defcustom tomlfmt-only-if-project-is-tomlfmted nil
    "Only tomlfmt if project has a pyproject.toml with a [tool.tomlfmt] section."
    :type 'boolean
    :safe 'booleanp)

  (defun tomlfmt-call-bin (input-buffer output-buffer error-buffer)
    "Call process taplo.

  Send INPUT-BUFFER content to the process stdin.  Saving the
  output to OUTPUT-BUFFER.  Saving process stderr to ERROR-BUFFER.
  Return black process the exit code."
    (with-current-buffer input-buffer
      (let ((process (make-process :name "tomlfmt"
                                   :command `(,tomlfmt-executable ,@(tomlfmt-call-args))
                                   :buffer output-buffer
                                   :stderr error-buffer
                                   :noquery t
                                   :sentinel (lambda (process event)))))
        (set-process-query-on-exit-flag (get-buffer-process error-buffer) nil)
        (set-process-sentinel (get-buffer-process error-buffer) (lambda (process event)))
        (save-restriction
          (widen)
          (process-send-region process (point-min) (point-max)))
        (process-send-eof process)
        (accept-process-output process nil nil t)
        (while (process-live-p process)
          (accept-process-output process nil nil t))
        (process-exit-status process))))

  (defun tomlfmt-call-args ()
    "Build taplo process call arguments."
    (append
     (when (and (buffer-file-name (current-buffer))
                (string-match "\\.toml\\'" (buffer-file-name (current-buffer))))
       (list "format"))
     '("-")))

  (defun tomlfmt-project-is-tomlfmted (&optional display)
    "Whether the project has a pyproject.toml with [tool.tomlfmt] in it."
    (when-let (parent (locate-dominating-file default-directory "pyproject.toml"))
      (with-temp-buffer
        (insert-file-contents (concat parent "pyproject.toml"))
        (re-search-forward "^\\[tool.tomlfmt\\]$" nil t 1))))

  ;;;###autoload
  (defun tomlfmt-buffer (&optional display)
    "Try to tomlfmt the current buffer.

  Show taplo output, if taplo exit abnormally and DISPLAY is t."
    (interactive (list t))
    (let* ((original-buffer (current-buffer))
           (original-window-states (mapcar
                                    (lambda (w)
                                      (list w (window-point w) (window-start w)))
                                    (get-buffer-window-list)))
           (tmpbuf (get-buffer-create "*tomlfmt*"))
           (errbuf (get-buffer-create "*tomlfmt-error*")))
      ;; This buffer can be left after previous black invocation.  It
      ;; can contain error message of the previous run.
      (dolist (buf (list tmpbuf errbuf))
        (with-current-buffer buf
          (erase-buffer)))
      (condition-case err
          (if (not (zerop (tomlfmt-call-bin original-buffer tmpbuf errbuf)))
              (error "taplo failed, see %s buffer for details" (buffer-name errbuf))
            (unless (eq (compare-buffer-substrings tmpbuf nil nil original-buffer nil nil) 0)
              (with-current-buffer tmpbuf
                (copy-to-buffer original-buffer (point-min) (point-max)))
              (dolist (win-stt original-window-states)
                (set-window-point (car win-stt) (nth 1 win-stt))
                (set-window-start (car win-stt) (nth 2 win-stt))))
            (mapc 'kill-buffer (list tmpbuf errbuf)))
        (error (message "%s" (error-message-string err))
               (when display
                 (with-current-buffer errbuf
                   (setq-local scroll-conservatively 0))
                 (pop-to-buffer errbuf))))))

  ;;;###autoload
  (define-minor-mode tomlfmt-mode
    "Automatically run black before saving."
    :lighter "  "
    (if tomlfmt-mode
        (add-hook 'before-save-hook 'tomlfmt-buffer nil t)
      (remove-hook 'before-save-hook 'tomlfmt-buffer t)))

  (add-hook 'conf-toml-mode-hook 'tomlfmt-mode)

#+END_SRC

#+RESULTS:
| tomlfmt-mode |

** Delight modeline clutter
#+BEGIN_SRC emacs-lisp
  (require 'delight)
  (delight 'python-mode "")
  (delight 'org-mode "")
  (delight 'dockerfile-mode "")
  (delight 'js-mode "")
  (delight 'css-mode "")
  (delight 'yapf-mode nil "yapfify")
  (delight 'isortify-mode nil "isortify")
  (delight 'eldoc-mode nil "eldoc")
  (delight 'golden-ratio-mode nil "golden-ratio")
  (delight 'undo-tree-mode nil "undo-tree")
  (delight 'highlight-parentheses-mode nil "highlight-parentheses")
  (delight 'auto-complete-mode nil "auto-complete")
  (delight 'wrap-region-mode nil "wrap-region")
  (delight 'auto-fill-function nil "simple")
  (delight 'smartparens-mode nil "smartparens")
  (delight 'yas-minor-mode nil "yasnippet")
  (delight 'ivy-mode nil "ivy")
  (delight 'hs-minor-mode nil "hideshow")
  (delight 'sh-mode "")
  (delight 'c++-mode "")
  (delight 'rainbow-mode "  ")
  (delight 'ivy-mode "  ")
  (delight 'mu4e-view-mode "")
  (delight 'mu4e-main-mode "")
  (delight 'magit-status-mode "")
  (delight 'abbrev-mode nil "abbrev")
  (delight 'inertias-global-minor-mode nil "inertial-scroll")
  (delight 'blacken-mode "  " "blacken")
#+END_SRC

# #+RESULTS:

** paradox
#+BEGIN_SRC emacs-lisp
  (setq paradox-github-token
        (cadr(auth-source-user-and-password "api.github.com" "xgarrido^paradox")))
#+END_SRC
** yaml folding function
#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-hook 'yaml-mode-hook #'superword-mode)
  (define-key yaml-mode-map
              (kbd "RET") #'newline-and-indent)

  ;; From https://gist.github.com/antonj/874106
  (defun aj-toggle-fold ()
    "Toggle fold all lines larger than indentation on current line"
    (interactive)
    (let ((col 1))
      (save-excursion
        (back-to-indentation)
        (setq col (+ 1 (current-column)))
        (set-selective-display
         (if selective-display nil (or col 1))))))

  ;; From https://github.com/yoshiki/yaml-mode/issues/25
  (defun yaml-outline-minor-mode ()
    (outline-minor-mode)
    (setq outline-regexp
          (rx
           (seq
            bol
            (group (zero-or-more "  ")
                   (or (group
                        (seq (or (seq "\"" (*? (not (in "\"" "\n"))) "\"")
                                 (seq "'" (*? (not (in "'" "\n"))) "'")
                                 (*? (not (in ":" "\n"))))
                             ":"
                             (?? (seq
                                  (*? " ")
                                  (or (seq "&" (one-or-more nonl))
                                      (seq ">-")
                                      (seq "|"))
                                  eol))))
                       (group (seq
                               "- "
                               (+ (not (in ":" "\n")))
                               ":"
                               (+ nonl)
                               eol))))))))
  (add-hook 'yaml-mode-hook #'yaml-outline-minor-mode)
  ;; This weird key-binding to co-exist with outline-minor mode
  (define-key yaml-mode-map
              (kbd "C-c C-c") #'aj-toggle-fold)
#+END_SRC
** gpg error
From https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources
#+BEGIN_SRC emacs-lisp
  (fset 'epg-wait-for-status 'ignore)
#+END_SRC
** openwith
#+BEGIN_SRC emacs-lisp
  (when (require 'openwith nil 'noerror)
    (add-to-list  'mm-inhibit-file-name-handlers 'openwith-file-handler)
    (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
    (openwith-mode 1))
#+END_SRC

** flyspell
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  ;; Automatically detect language for Flyspell
  (use-package guess-language         
    :ensure t
    :defer t
    :init (add-hook 'mu4e-compose-mode-hook #'guess-language-mode)
    :config
    (setq guess-language-languages '(en fr)
          guess-language-min-paragraph-length 25)
    :diminish guess-language-mode)
#+END_SRC
